# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['FORMAT_GEE_DATETIME_STRING', 'create_gee_image_collection', 'filter_jobs']

# %% ../00_core.ipynb 3
import datetime
from dateutil import parser
import logging

import ee

# %% ../00_core.ipynb 4
FORMAT_GEE_DATETIME_STRING = '%Y-%m-%dT%H:%M:%SZ'

# Create a GEE image collection, if needed.
def create_gee_image_collection(gee_gcp_project, gee_image_collection):
    try:
        ee.data.createAsset(
            value={'type': 'ImageCollection'},
            path=f'projects/{gee_gcp_project}/assets/{gee_image_collection}'
        )
        logging.debug('Succeeded in creating asset.')
    except ee.EEException as e:
        if str(e).startswith('Cannot overwrite asset'):
            logging.info('Unable to create GEE asset. It may already exist.')
        else:
            raise(e)

# %% ../00_core.ipynb 5
def filter_jobs(
    # hyp3_batch,
    jobs,
    expired=None,
    status_code=None,
):
    "Filter ASF batch jobs by specified criteria."
    # jobs = hyp3_batch.jobs
    # Filter by expiration status.
    if expired is False:
        jobs = [
            job for job in jobs
            if parser.parse(job.to_dict()['expiration_time']) > datetime.datetime.now(datetime.timezone.utc)
        ]
    elif expired is True:
        jobs = [
            job for job in jobs
            if parser.parse(job.to_dict()['expiration_time']) <= datetime.datetime.now(datetime.timezone.utc)
        ]
    # Filter by status code.
    if isinstance(status_code, str):
        print('Status code is a string')
        status_code = [status_code]
    if isinstance(status_code, list):
        print('Status code is a list')
        jobs = [
            job for job in jobs
            if job.to_dict()['status_code'] in status_code
        ]
    return jobs
